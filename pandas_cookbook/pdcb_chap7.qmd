---
title: "Chapter 7 - Filtering Rows"
subtitle: "Pandas Cookbook"
author: Tom Madsen
date: January 3, 2024
format: 
    html:
        self-contained: true 
---

Github Repo:  https://github.com/PacktPublishing/Pandas-Cookbook-Second-Edition/tree/master

## Calculating Boolean statistics

```{python}
import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
from pandas.testing import assert_frame_equal
```

```{python}
movie = (
    pd.read_csv(
        "https://raw.githubusercontent.com/PacktPublishing/Pandas-Cookbook-Second-Edition/master/data/movie.csv",
        index_col="movie_title"
    )
)

movie[["duration"]].head()

movie_2_hours = movie["duration"] > 120
movie_2_hours.head()
```

```{python}
movie["duration"].dropna().gt(120).mean() * 100

movie_2_hours.describe()
```

## Constructing multiple Boolean conditions

```{python}
criteria1 = movie.imdb_score > 8
criteria2 = movie.content_rating == "PG-13"
criteria3 = (movie.title_year < 2000) | (movie.title_year > 2009)
```

```{python}
criteria_final = criteria1 & criteria2 & criteria3
criteria_final.head()
```

## Filtering with Boolean arrays

```{python}
cols = ["imdb_score", "content_rating", "title_year"]
movie_filtered = movie.loc[criteria_final, cols]
movie_filtered.head()
```

```{python}
movie.iloc[criteria_final.to_numpy()]
```

## Comparing row filtering and index Filtering

```{python}
college = (
    pd.read_csv(
        "https://raw.githubusercontent.com/PacktPublishing/Pandas-Cookbook-Second-Edition/master/data/college.csv"
    )
)
```

```{python}
college[college["STABBR"] == "TX"].head()
```

```{python}
college2 = college.set_index("STABBR")
college2.loc["TX"].head()
```

## Selecting with unique and sorted indexes

```{python}
college2.index.is_monotonic_increasing
```

```{python}
college3 = college2.sort_index()
college3.index.is_monotonic_increasing
college3.index.is_unique
```

```{python}
college_unique = college.set_index("INSTNM")
college_unique.index.is_unique
college_unique.loc[["Stanford University"]]
```

```{python}
college[college["INSTNM"].str.contains("Wyoming")]
college[college["STABBR"] == "WY"]
```

```{python}
college.index = (
    college["CITY"] + ", " + college["STABBR"]
)
college = college.sort_index()
college.head()
```

```{python}
college.loc["Laramie, WY"]
```

## Translating SQL WHERE clauses

```{python}
employee = (
    pd.read_csv(
        "https://raw.githubusercontent.com/PacktPublishing/Pandas-Cookbook-Second-Edition/master/data/employee.csv"
    )
)
employee.dtypes
employee.DEPARTMENT.value_counts().head()
employee.GENDER.value_counts()
employee.BASE_SALARY.describe()
```

## Improving the readability of Boolean indexing with the query method

Pg 230

```{python}
depts = [
    "Houston Police Department-HPD",
    "Houston Fire Department (HFD)",
]
select_columns = [
    "UNIQUE_ID",
    "DEPARTMENT",
    "GENDER",
    "BASE_SALARY",
]
```

```{python}
qs = (
    "DEPARTMENT in @depts "
    " and GENDER == 'Female' "
    " and 80000 <= BASE_SALARY <= 120000"
)
```

```{python}
emp_filtered = employee.query(qs)
emp_filtered[select_columns].head()
```

```{python}
top10_depts = (
    employee.DEPARTMENT.value_counts()
    .index[:10]
    .tolist()
)
top10_depts
```

```{python}
qs = "DEPARTMENT not in @top10_depts and GENDER == 'Female'"
employee_filtered2 = employee.query(qs)
employee_filtered2.head()
```

## Preserving Series size with the `.where` method

```{python}
fb_likes = movie["actor_1_facebook_likes"].dropna()
fb_likes.head()
fb_likes.describe()
```

```{python}
fig, ax = plt.subplots(figsize=(10, 8))
fb_likes.hist(ax=ax)
```

```{python}
criteria_high = fb_likes < 20_000
criteria_high.mean().round(2)
```

```{python}
fb_likes.where(criteria_high, other=20000).head()
```

```{python}
criteria_low = fb_likes > 300
fb_likes_cap = fb_likes.where(
    criteria_high, other=20_000
).where(criteria_low, 300)
fb_likes_cap.head()

len(fb_likes), len(fb_likes_cap)
```

```{python}
fig, ax = plt.subplots(figsize=(10, 8))
fb_likes_cap.hist(ax=ax)
```

## Masking DataFrame Rows

```{python}
c1 = movie["title_year"] >= 2010
c2 = movie["title_year"].isna()
criteria = c1 | c2

movie.mask(criteria).head()

movie_mask = movie.mask(criteria).dropna(how="all")
movie_mask.head()

movie_boolean = movie[movie["title_year"] < 2010]
```

```{python}
assert_frame_equal(
    movie_boolean, movie_mask, check_dtype=False
)
```

## Selecting with Booleans, integer location, and labels

```{python}
c1 = movie["content_rating"] == "G"
c2 = movie["imdb_score"] < 4
criteria = c1 & c2

movie_loc = movie.loc[criteria]
movie_loc.head()

movie_loc.equals(movie[criteria])

movie_iloc = movie.iloc[criteria.to_numpy()]
movie_iloc.equals(movie_loc)
```

```{python}
criteria_col = movie.dtypes == np.int64
criteria_col.head()

movie.loc[:, criteria_col].head()
```

```{python}
col_index = [movie.columns.get_loc(col) for col in cols]
col_index
```

```{python}
movie.select_dtypes(int)
```