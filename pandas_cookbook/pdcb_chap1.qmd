---
title: Chapter 1 - Pandas Foundations
format:
    html:
        self-contained: true
# jupyter:
#   kernelspec:
#     display_name: 'Python [conda env:eda]'
#     language: python
#     name: conda-env-eda-py
---



```{python}
import pandas as pd
import numpy as np
```

```{python}
movies_url = 'https://raw.githubusercontent.com/PacktPublishing/Pandas-Cookbook-Second-Edition/master/data/movie.csv'
```

```{python}
movies = pd.read_csv(movies_url)
movies
```

```{python}
movies.to_numpy()
```

```{python}
movies.index.to_numpy()
```

```{python}
movies.columns.to_numpy()
```

```{python}
movies.dtypes
```

```{python}
movies.dtypes.value_counts()
```

```{python}
movies.info()
```

```{python}
movies.director_name
```

```{python}
movies.loc[:, "director_name"]
```

```{python}
movies.iloc[:,1]
```

```{python}
def show_df(df_):
    print(f'df size = {df_.size}')
    print(f'df count = {df_.count()}')
    # display(df_.describe())
    return df_
    
(movies
.director_name
.value_counts(normalize=True)
.pipe(show_df)
)
```

```{python}
movies.director_name.hasnans
```

```{python}
movies.query('director_name.isna()')
```

```{python}
movies.query('imdb_score.gt(7)')[['movie_title', 'title_year', 'director_name', 'imdb_score']].sort_values('imdb_score', ascending=False)
```

```{python}
fb_likes = movies.actor_1_facebook_likes
```

```{python}
def debug_ser(ser):
    print("BEFORE")
    print(ser)
    print("AFTER")
    return ser

(fb_likes
.fillna(0)
 .pipe(debug_ser)
.astype(int)
 .head()
)
```

```{python}
intermediate = None
def get_intermediate(ser):
    global intermediate
    intermediate = ser
    return ser
```

```{python}
res = (
    fb_likes
    .fillna(0)
    .pipe(get_intermediate)
    .astype(int)
    .head()
)
```

```{python}
intermediate
```

```{python}
col_map = {
    "director_name": "director",
    "num_critic_for_reviews": "critic_reviews"
}
```

```{python}
movies.rename(columns=col_map).head()
```

```{python}
idx_map = {
    "Avatar":"Ratava",
    "Spectre":"Ertceps",
    "Pirates of the Caribbean: At World's End":"POC",
}
```

```{python}
col_map = {
    "aspect_ratio": "aspect",
    "movie_facebook_likes": "fblikes",
}
```

```{python}
(
    movies.set_index("movie_title")
    .rename(index=idx_map, columns=col_map)
    .head(3)
)
```

```{python}
movies = pd.read_csv(movies_url, index_col="movie_title")
ids = movies.index.to_list()
columns = movies.columns.to_list()
```

```{python}
ids[0] = "Ratava"
ids[1] = "POC"
ids[2] = "Ertceps"
columns[1] = "director"
columns[-2] = "aspect"
columns[-1] = "fblikes"
```

```{python}
movies.index = ids
```

```{python}
movies.columns = columns
```

```{python}
movies.head(3)
```

```{python}
def to_clean(val):
    return val.strip().lower().replace(" ", "_")
```

```{python}
movies.rename(columns=to_clean).head(3)
```

```{python}
cols = [
    col.strip().lower().replace(" ", "_")
    for col in movies.columns
]
```

```{python}
movies.columns = cols
```

```{python}
movies.head(3)
```

```{python}
movies = pd.read_csv(movies_url)
```

```{python}
idx_map
```

```{python}
col_map
```

```{python}
(
    movies
    .rename(index=idx_map, columns=col_map)
    .assign(has_seen=0)
)
```

```{python}
cols = [
    "actor_1_facebook_likes",
    "actor_2_facebook_likes",
    "actor_3_facebook_likes",
    "director_facebook_likes",
]
```

```{python}
sum_col = movies.loc[:, cols].sum(axis="columns")
```

```{python}
sum_col.head()
```

```{python}
movies.assign(total_likes = sum_col).head(5)
```

```{python}
def sum_likes(df_):
    return df_[
    [
        c
        for c in df_.columns
        if "like" in c
        and ("actor" in c or "director" in c)
    ]
    ].sum(axis=1)
```

```{python}
movies.assign(total_likes=sum_likes).head(5)
```

```{python}
sum_likes(movies).isna().sum()
```

```{python}
def cast_like_gt_actor(df_):
    return (
        df_["cast_total_facebook_likes"]
        >= df_["total_likes"]
    )
```

```{python}
total = (
movies["actor_1_facebook_likes"]
 + movies["actor_2_facebook_likes"]
 + movies["actor_3_facebook_likes"]
 + movies["director_facebook_likes"]
 )
```

```{python}
df2 = movies.assign(
    total_likes=total,
    is_cast_likes_more=cast_like_gt_actor,
)
```

```{python}
df2["is_cast_likes_more"].all()
```

```{python}
df2 = df2.drop(columns="total_likes")
```

```{python}
actor_sum = movies[[
    c
    for c in movies.columns
    if "actor" in c and "_likes" in c
]].sum(axis="columns")
```

```{python}
actor_sum.head(5)
```

```{python}
movies.cast_total_facebook_likes.ge(actor_sum).all()
```

```{python}
pct_like = actor_sum.div(
    movies.cast_total_facebook_likes
).mul(100)
```

```{python}
pct_like.describe()
```

```{python}
pd.Series(
    pct_like.to_numpy(), index=movies['movie_title']
).head()
```

```{python}
profit_index = movies.columns.get_loc("gross") + 1
profit_index

movies.insert(
    loc=profit_index,
    column="profit",
    value=movies["gross"] - movies["budget"]
)

# del movies["profit"]
```

