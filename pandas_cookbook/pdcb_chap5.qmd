---
title: "Chap 5 - EDA"
format: 
    html:
        self-contained: true
---

## Imports

```{python}
import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import seaborn as sns
from scipy import stats
import warnings
import ydata_profiling as pp 

pd.set_option('display.max_columns', 50)
warnings.filterwarnings("ignore")
```
## Load the Dataset

```{python}
file_url = "data/vehicles.csv.zip"
fueleco = pd.read_csv(file_url)
fueleco
```

```{python}
fueleco.select_dtypes(exclude="object").mean()
fueleco.select_dtypes(exclude="object").std()
fueleco.select_dtypes(exclude="object").info()
fueleco.select_dtypes(exclude=["object", "bool"]).quantile(
    [0, 0.25, 0.5, 0.75, 1]
)
fueleco.select_dtypes(exclude=["object", "bool"]).describe().T
fueleco.describe(include=object)
```
## Column Types

```{python}
fueleco.dtypes.value_counts()
fueleco.select_dtypes(include="bool")
```

```{python}
fueleco.select_dtypes("int64").describe().T
```

```{python}
np.iinfo(np.int16)
fueleco[["city08", "comb08"]].info(memory_usage="deep")
```

```{python}
(
    fueleco[["city08", "comb08"]]
    .assign(
        city08=fueleco.city08.astype(np.int16),
        comb08=fueleco.comb08.astype(np.int16),
    )
    .info(memory_usage="deep")
)
```

```{python}
fueleco[["make"]].info(memory_usage="deep")
```

```{python}
(
    fueleco[["make"]]
    .assign(make=fueleco.make.astype("category"))
    .info(memory_usage="deep")
)
```
## Categorical data
```{python}
fueleco.select_dtypes(object).columns
fueleco.drive.nunique()
fueleco.drive.sample(5, random_state=42)
fueleco.drive.isna().mean() * 100
fueleco.drive.value_counts(dropna=False)
```

```{python}
top_n = fueleco.make.value_counts().index[:6]
(
    fueleco
    .assign(
        make=fueleco.make.where(
            fueleco.make.isin(top_n), "Other"
        )
    )
).make.value_counts(dropna=False)
```

```{python}
fig, ax = plt.subplots(figsize=(10, 8))
top_n = fueleco.make.value_counts().index[:6]
(
    fueleco
    .assign(
        make=fueleco.make.where(
            fueleco.make.isin(top_n), "Other"
        )
    )
    .make.value_counts(dropna=False)
    .plot.bar(ax=ax)
)
fig.savefig("c5-catpan.png", dpi=300)
```

```{python}
fig, ax = plt.subplots(figsize=(10,8))
top_n = fueleco.make.value_counts().index[:6]
sns.countplot(
    y="make",
    data=(
        fueleco
        .assign(make=fueleco.make.where(fueleco.make.isin(top_n), "Other"))
    )
)
fig.savefig("c5-catsns.png", dpi=300)
```


```{python}
fueleco.rangeA.value_counts()
```

```{python}
fueleco.rangeA
(
    fueleco.rangeA.str.extract(r"([^0-9.])")
    .dropna()
    .apply(lambda row: "".join(row), axis=1)
    .value_counts()
)
```

```{python}
set(fueleco.rangeA.apply(type))
fueleco.rangeA.isna().sum()
```

```{python}
(
    fueleco.rangeA
    .fillna("0")
    .str.replace("-", "/")
    .str.split("/", expand=True)
    .astype(float)
    .mean(axis=1)
    .pipe(lambda ser_: pd.cut(ser_, 10))
    .value_counts()
    # .pipe(lambda s_: s_.where(s_< 100))
    # .dropna()
    # .sort_values()
)
```
## Continuous Data

```{python}
fueleco.select_dtypes("number")
fueleco.city08.sample(5, random_state=42)
fueleco.city08.isna().sum()
fueleco.city08.describe()
```

```{python}
fig, ax = plt.subplots(figsize=(10,8))
fueleco.city08.hist(ax=ax, bins=30)
fig.savefig(
    "c5-conthistpan.png",
    dpi=300
)
```

```{python}
fig, ax = plt.subplots(figsize=(10,8))
sns.distplot(fueleco.city08, rug=True, ax=ax)
fig.savefig(
    "c5-conthistsns.png",
    dpi=300
)
```

```{python}
fig, axs = plt.subplots(nrows=3, figsize=(10,8))
sns.boxplot(x=fueleco.city08, ax=axs[0])
sns.violinplot(x=fueleco.city08, ax=axs[1])
sns.boxenplot(x=fueleco.city08, ax=axs[2])
fig.savefig(
    "c5-contothersns.png",
    dpi=300
)
```


```{python}
stats.kstest(fueleco.city08, cdf="norm")
```


```{python}
fig, ax = plt.subplots(figsize=(10, 8))
stats.probplot(fueleco.city08, plot=ax)
fig.savefig(
    "c5-conprob.png",
    dpi=300
)
```

## Comparing continuous values across categories


```{python}
mask = fueleco.make.isin(
    ["Ford", "Honda", "Tesla", "BMW"]
)
fueleco[mask].groupby("make").city08.agg(
    ["mean", "std"]
)
```

```{python}
g = sns.catplot(
    x="make", y="city08", data=fueleco[mask], kind="box"
)
```

```{python}
(fueleco[mask]
.groupby("make")
.city08
.count()
)
```

```{python}
g = sns.catplot(
    x="make", y="city08", data=fueleco[mask], kind="box"
)
sns.swarmplot(
    x="make",
    y="city08",
    data=fueleco[mask],
    color="k",
    size=1,
    ax=g.ax,
)
g.ax.figure
```


```{python}
g = sns.catplot(
    x="make",
    y="city08",
    data=fueleco[mask],
    kind="box",
    col="year",
    col_order=[2012, 2014, 2016, 2018],
    col_wrap=2,
)
```

```{python}
g = sns.catplot(
    x="make",
    y="city08",
    data=fueleco[mask],
    kind="box",
    hue="year",
    hue_order=[2012, 2014, 2016, 2018],
)
```


```{python}
(
    fueleco[mask]
    .groupby("make")
    .city08.agg(["mean", "std"])
    .style.background_gradient(cmap="RdBu", axis=0)
)
```

## Comparing two continuous columns

```{python}
fueleco.city08.cov(fueleco.highway08)
fueleco.city08.cov(fueleco.comb08)
fueleco.city08.cov(fueleco.cylinders)
```


```{python}
fueleco.city08.corr(fueleco.highway08)
fueleco.city08.corr(fueleco.cylinders)
```


```{python}
fig, ax = plt.subplots(figsize=(8,8))
corr = fueleco[
    ["city08", "highway08", "cylinders"]
].corr()
mask = np.zeros_like(corr, dtype=np.bool)
mask[np.triu_indices_from(mask)] = True
sns.heatmap(
    corr,
    mask=mask,
    fmt=".2f",
    annot=True,
    ax=ax,
    cmap="RdBu",
    vmin=-1,
    vmax=1,
    square=True

)
```


```{python}
fig, ax = plt.subplots(figsize=(8,8))
fueleco.plot.scatter(
    x="city08", y="highway08", alpha=0.1, ax=ax
)
fig.savefig(
    "c5-scatpan.png",
    dpi=300,
    bbox_inches="tight",
)
```

```{python}
fig, ax = plt.subplots(figsize=(8,8))
fueleco.plot.scatter(
    x="city08", y="cylinders", alpha=0.1, ax=ax
)
```


```{python}
fig, ax = plt.subplots(figsize=(8,8))
(
    fueleco.assign(
        cylinders=fueleco.cylinders.fillna(0)
    ).plot.scatter(
        x="city08", y="cylinders", alpha=0.1, ax=ax
    )
)
```


```{python}
res = sns.lmplot(
    x="city08", y="highway08", data=fueleco
)
```


```{python}
res = sns.relplot(
    x="city08", 
    y="highway08", 
    data=fueleco.assign(
        cylinders=fueleco.cylinders.fillna(0)
    ),
    hue="year",
    size="barrels08",
    alpha=0.5,
    height=8,
)
```

```{python}
res = sns.relplot(
    x="city08", 
    y="highway08", 
    data=fueleco.assign(
        cylinders=fueleco.cylinders.fillna(0)
    ),
    hue="year",
    size="barrels08",
    alpha=0.5,
    height=8,
    col="make",
    col_order=["Ford", "Tesla"]
)
```


```{python}
fueleco.city08.corr(
    fueleco.barrels08, method="spearman"
)
```

## Comparing categorical values with categorical value_counts

```{python}
def generalize(ser, match_name, default):
    seen = None
    for match, name in match_name:
        mask = ser.str.contains(match)
        if seen is None:
            seen = mask
        else:
            seen |= mask
        ser = ser.where(~mask, name)
    ser = ser.where(seen, default)
    return ser
```


```{python}
makes = ["Ford", "Tesla", "BMW", "Toyota"]
data = fueleco[fueleco.make.isin(makes)].assign(
    SClass=lambda df_: generalize(
        df_.VClass, [
            ("Seaters", "Car"),
            ("Car", "Car"),
            ("Utility", "SUV"),
            ("Truck", "Truck"),
            ("Van", "Van"),
            ("van", "Van"),
            ("Wagon", "Wagon"),
        ],
        "other",
    )
)
```

```{python}
data.groupby(["make", "SClass"]).size().unstack()
pd.crosstab(data.make, data.SClass)
```

```{python}
pd.crosstab(
    [data.year, data.make], [data.SClass, data.VClass]
)
```

```{python}
fig, ax = plt.subplots(figsize=(10,8))
(
    data.pipe(
        lambda df_: pd.crosstab(df_.make, df_.SClass)
    ).plot.bar(ax=ax)
)
```

```{python}
res = sns.catplot(
    kind="count", x="make", hue="SClass", data=data
)
```

```{python}
fig, ax = plt.subplots(figsize=(10,8))
(
    data.pipe(
        lambda df_: pd.crosstab(df_.make, df_.SClass)
    )
    .pipe(lambda df_: df_.div(df_.sum(axis=1), axis=0))
    .plot.bar(stacked=True, ax=ax)
)
```

## Using the pandas profiling library

For compatibility with `pydantic v2` need to `pip install ydata-profiling` and then `import ydata-profiling as pp`

```{python}
report = pp.ProfileReport(fueleco)
report.to_file("fueleco.html")
```
