---
title: "R4DS"
subtitle: "Chapter 4"
format: 
  html:
    self-contained: true
---

```{r}
library(nycflights13)
library(tidyverse)
library(Lahman)
```

```{r}
flights |>
    filter(dest == "IAH") |>
    group_by(year, month, day) |>
    summarize(
        arr_delay = mean(arr_delay, na.rm=TRUE)
    )
```

```{r}
flights %>%
    filter(dep_delay>120)
```

```{r}
flights |>
    filter(month==1 | month==2)
```

```{r}
flights |>
    filter(month %in% c(1,2))
```

```{r}
jan1 <- flights |>
    filter(month==1 & day==1)
jan1
```

```{r}
flights |>
    arrange(year, month, day, dep_time)
```

```{r}
flights |>
    arrange(desc(dep_delay))
```

```{r}
flights |>
    distinct(origin, dest, .keep_all = TRUE)
```

```{r}
flights |>
    count(origin, dest, sort=TRUE)
```

Stopped at Section 4.3 Columns
```{r}
flights |>
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time *60,
    .before = 1
  )
```
```{r}
flights |>
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time *60,
    .keep = "used"
  )
```
```{r}
flights |>
  select(year, month, day)
```
```{r}
flights |>
  select(tail_num = tailnum)
```
```{r}
flights |>
  select(ends_with("delay"))
```
## The pipe
```{r}
flights |>
  filter(dest == "IAH") |>
  mutate(speed = distance / air_time * 60) |>
  select(year:day, dep_time, carrier, flight, speed) |>
  arrange(desc(speed))
```
```{r}
mtcars |> 
  group_by(cyl) |> 
  summarize(n = n())
```
## Groups
```{r}
flights |> 
  group_by(month)
```
```{r}
flights |> 
  group_by(month) |> 
  summarize(
    avg_delay = mean(dep_delay, na.rm=TRUE)
  )
```
```{r}
flights |> 
  group_by(month) |> 
  summarize(
    delay = mean(dep_delay, na.rm=TRUE),
    n = n()
  )
```
```{r}
flights |> 
  group_by(dest) |> 
  slice_max(arr_delay, n = 1) |> 
  relocate(dest)
```
```{r}
daily <- flights |> 
  group_by(year, month, day)
daily
```
```{r}
daily_flights <- daily |> 
  summarize(n = n(),
            .groups = "drop_last")
daily_flights
```
## Case study: aggregates and sample size
```{r}
batters <- Lahman::Batting |> 
  group_by(playerID) |> 
  summarize(
    performance = sum(H, na.rm=TRUE) / sum(AB, na.rm=TRUE),
    n = sum(AB, na.rm=TRUE)
  )
batters
```
```{r}
batters |> 
  filter(n > 100) |> 
  ggplot(aes(x=n, y=performance)) +
  geom_point(alpha=1/10) +
  geom_smooth(se=FALSE)
```


