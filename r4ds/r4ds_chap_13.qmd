---
title: "Chapter 13 - Logical Vectors"
subtitle: "R 4 Data Science"
author: "Tom Madsen"
format:
  html: 
    self-contained: true
    toc: true
---

## 13.1 Introduction

### 13.1.1 Prerequisites
```{r}
library(tidyverse)
library(nycflights13)
```
```{r}
x <- c(1, 2, 3, 5, 7, 11, 13)
x * 2
```
```{r}
df <- tibble(x)
df |> 
  mutate(y = x * 2)
```

## 13.2 Comparisons
```{r}
flights |> 
  filter(dep_time > 600 & dep_time < 2000 & abs(arr_delay) < 20)
```
```{r}
flights |> 
  mutate(
    daytime = dep_time > 600 & dep_time < 2000,
    approx_ontime = abs(arr_delay) < 20,
    .keep = "used"
  )
```
```{r}
flights |> 
  mutate(
    daytime = dep_time > 600 & dep_time < 2000,
    approx_ontime = abs(arr_delay) < 20,
  ) |> 
  filter(daytime & approx_ontime)
  
```

### 13.2.1 Floating point comparision
```{r}
x <- c(1 / 49 * 49, sqrt(2) ^ 2)
x
```
```{r}
x == c(1, 2)
```
```{r}
print(x, digits = 16)
```
```{r}
near(x, c(1, 2))
```

### 13.2.2 Missing values
```{r}
NA > 5
10 == NA
NA == NA
```

### 13.2.3 `is.na()`
```{r}
is.na(c(TRUE, NA, FALSE))
is.na(c(1, NA, 3))
is.na(c("a", NA, "b"))
```
```{r}
flights |> 
  filter(is.na(dep_time))
```
```{r}
flights |> 
  filter(month == 1, day == 1) |> 
  arrange(desc(is.na(dep_time)), dep_time)
```

## 13.3 Boolean algebra

### 13.3.1 Missing values
```{r}
df <- tibble(x = c(TRUE, FALSE, NA))

df |>
  mutate(
    and = x & NA,
    or = x | NA
  )
```

### 13.3.2 Order of operations

```{r}
flights |>
  filter(month == 11 | month == 12)

flights |>
  mutate(
    nov = month == 11,
    final = nov | 12,
    .keep = "used"
  ) |>
  filter(nov == TRUE)
```

### 13.3.3 `%in%`

```{r}
1:12 %in% c(1, 5, 11)
letters[1:10] %in% c("a", "e", "i", "o", "u")

flights |>
  filter(month %in% c(11, 12))

flights |>
  filter(dep_time %in% c(NA, 0800))
```

## 13.4 Summaries

### 13.4.1 Logical summaries

```{r}
flights |>
  group_by(year, month, day) |>
  summarize(
    all_delayed = all(dep_delay <= 60, na.rm = TRUE),
    any_long_delay = any(arr_delay >= 300, na.rm = TRUE),
    .groups = "drop"
  )
```

```{r}
flights |>
  group_by(year, month, day) |>
  summarize(
    all_delayed = mean(dep_delay <= 60, na.rm = TRUE),
    any_long_delay = sum(arr_delay >= 300, na.rm = TRUE),
    .groups = "drop"
  )
```

### 13.4.3 Logical subsetting

```{r}
flights |>
  filter(arr_delay > 0) |>
  group_by(year, month, day) |>
  summarize(
    behind = mean(arr_delay),
    n = n(),
    .groups = "drop"
  )
```

```{r}
flights |>
  group_by(year, month, day) |>
  summarize(
    behind = mean(arr_delay[arr_delay > 0], na.rm = TRUE),
    ahead = mean(arr_delay[arr_delay < 0], na.rm = TRUE),
    n = n(),
    .groups = "drop"
  )
```


## Conditional transformations

### 13.5.1 `if_else()`

```{r}
x <- c(-3:3, NA)
if_else(x > 0, "+ve", "-ve", "???")
```

### 13.5.2 `case_when()`

```{r}
x <- c(-3:3, NA)
case_when(
  x == 0 ~ "0",
  x < 0 ~ "-ve",
  x > 0 ~ "+ve",
  is.na(x) ~ "???"
)
```

```{r}
flights |>
  mutate(
    status = case_when(
      is.na(arr_delay) ~ "cancelled",
      arr_delay < -30 ~ "very early",
      arr_delay < -15 ~ "early",
      abs(arr_delay) <= 15 ~ "on time",
      arr_delay < 60 ~ "late",
      arr_delay < Inf ~ "very late"
    ),
    .keep = "used"
  )
```

