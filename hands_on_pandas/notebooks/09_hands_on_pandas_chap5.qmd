---
title: "Hands On Pandas"
subtitle: "Chapter 5 - Visualizing Data with Pandas and Matplotlib"
format:
  html:
    code-fold: true
jupyter: python3
---

## Imports

```{python}
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
```

## An introduction to matplotlib

### The basics

```{python}
fb = pd.read_csv(
    '../data/fb_stock_prices_2018.csv',
    index_col='date', parse_dates=True
)
```

```{python}
plt.plot(fb.index, fb.open)
# plt.show()
```

```{python}
plt.plot('high', 'low', 'or', data=fb.head(20))
```

```{python}
quakes = pd.read_csv('../data/earthquakes.csv')
plt.hist(quakes.query('magType == "ml"').mag)
```

```{python}
x = quakes.query('magType == "ml"').mag 
fig, axes = plt.subplots(1, 2, figsize=(10,3))
for ax, bins in zip(axes, [7, 35]):
  ax.hist(x, bins=bins)
  ax.set_title(f'bins param: {bins}')
```

### Plot components

```{python}
fig = plt.figure(figsize=(3,3))
outside = fig.add_axes([0.1, 0.1, 0.9, 0.9])
inside = fig.add_axes([0.7, 0.7, 0.25, 0.25])
```

```{python}
fig = plt.figure(figsize=(8,8))
gs = fig.add_gridspec(3,3)
top_left = fig.add_subplot(gs[0,0])
mid_left = fig.add_subplot(gs[1,0])
top_right = fig.add_subplot(gs[:2, 1:])
bottom = fig.add_subplot(gs[2,:])
fig.savefig('empty.png')
```

```{python}
plt.close('all')
```

### Additional Options

```{python}
fig = plt.figure(figsize=(10,4))
```

```{python}
fig, axes = plt.subplots(1, 2, figsize=(10, 4))
```

## Plotting with pandas

```{python}
covid = pd.read_csv('../data/covid19_cases.csv').assign(
  date=lambda df_: pd.to_datetime(df_.dateRep, format='%d/%m/%Y')
).set_index('date').replace(
  'United_States_of_America', 'USA'
).sort_index()['2020-01-18':'2020-09-18']
```
### Evolution over time
```{python}
fb.plot(
  kind='line', y='open', figsize=(10, 5), style='-b',
  legend=False, title='Evolution of Facebook Open Price'
)
```

```{python}
fb.plot(
  kind='line', y='open', figsize=(10, 5),
  color='blue', linestyle='solid',
  legend=False, title='Evolution of Facebook Open Price'
)
```

```{python}
fb.first('1W').plot(
  y=['open', 'high', 'low', 'close'],
  style=['o-b', '--r', ':k', '.-g'],
  title='Facebook OHLC Prices during '
  '1st Week of Trading 2018'
).autoscale()
```

```{python}
fb.plot(
  kind='line', subplots=True, layout=(3, 2),
  figsize=(15, 10), title='Facebook Stock 2018'
)
```

```{python}
new_cases_rolling_average = covid.pivot_table(
  index=covid.index,
  columns='countriesAndTerritories',
  values='cases'
).rolling(7).mean()
```

```{python}
fig, axes = plt.subplots(1, 3, figsize=(15, 5))
new_cases_rolling_average[['China']].plot(ax=axes[0], style='-.c')
new_cases_rolling_average[['Italy', 'Spain']].plot(
  ax=axes[1], style=['-', '--'],
  title='7-day rolling average of new COVID-19 cases\n(source: ECDC)'
)
new_cases_rolling_average[['Brazil', 'India', 'USA']].plot(
  ax=axes[2], style=['--', ':', '-']
)
```
Thru page 283 (289 of PDF)



For a demonstration of a line plot on a polar axis, see @fig-polar.

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```